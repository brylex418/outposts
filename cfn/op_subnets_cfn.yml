Resources:
  LambdaNetworkRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: Lambda-Deploy-Subnets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:createsubnet'
                  - 'ec2:createtags'
                  - 'ec2:deletesubnet'
                  - 'ec2:deletetags'
                Resource:
                  - '*'
        - PolicyName: Lambda-Get-S3-Layer
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - arn:aws:s3:::brylex-lambda-layers-otl/*
  
  OutpostSubnetFunction:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes: [python3.7]
      Content:
        S3Bucket: !Ref LambdaLayerBucket
        S3Key: !Ref LambdaLayerZipFile

  
  CreateSubnetLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function creates some subnets on an outpost
      Layers: [!Ref OutpostSubnetFunction]
      Code:
        ZipFile: |-
          import op_subnet
          import os 
          import logging
          import cfnresponse

          log = logging.getLogger(__name__)
          outpost_az = os.environ['opaz']
          # cpmmaincidr = os.environ['cpmmaincidr']
          oparn = os.environ['oparn']
          vpcid = os.environ['vpcid']
          
          def lambda_handler(event, context):
            logging.basicConfig(level=logging.DEBUG)
            log = logging.getLogger(__name__)
            responseData = {}
            physicalResourceId = {}
            
            try:
              if event['RequestType'] == 'Create':

                subnet1 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.186.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet2 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.187.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet3 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.188.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet4 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.189.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet5 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.190.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet6 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.191.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet7 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.192.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet8 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.193.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet9 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.194.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet10 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.195.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet11 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.196.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet12 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.197.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet13 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.198.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')
                subnet14 = op_subnet.createAndTagSubnet('us-west-2a', 'vpc-092e3e79a9ca00270', '10.0.199.0/24', 'arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9', 'test')

              response = {'subnet1': physicalResourceId}
              print('Created Subnets on outpost')
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)

            except Delete:
              if event['RequestType'] == 'Delete':
                
                op_subnet.deleteSubnet(physicalResourceId)


              response = {'subnet': physicalResourceId}
              print('Deleted Subnets on outpost')
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)

            except Failure:
              return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Environment:
        Variables:
          opaz: !Ref outpostAz
          oparn: !Ref outpostArn
          vpcid: !Ref vpcid
          # cpmmaincidr: !Ref cpmmaincidr
        # psmmaincidr: !Ref psmmaincidr
        # psmsshmaincidr: !Ref psmsshmaincidr
        # ptamaincidr: !Ref ptamaincidr
        # pvwamaincidr: !Ref pvwamaincidr
        # vaulmaincidr: !Ref vualtmaincidr
        # cpmdrcidr: !Ref cpmdrcidr
        # psmdrcidr: !Ref psmdrcidr
        # psmsshdrcidr: !Ref psmsshdrcidr
        # ptadrcidr: !Ref ptadrcidr
        # pvwadrcidr: !Ref pvwadrcidr
        # vualtdrcidr: !Ref vaultdrcidr
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 60
      Role: !GetAtt LambdaNetworkRole.Arn
    
  InvokeSubnetFunction:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CreateSubnetLambda.Arn

Parameters:
  LambdaLayerBucket:
    Type: String
    Description: Bucket that holds Lambda Layer
    Default: brylex-lambda-layers-otl
  LambdaLayerZipFile:
    Type: String
    Description: key for the s3 object for lambda layer (must be a .zip)
    Default: python-layer.zip
  outpostAz:
    Type: String
    Description: This is the AZ the outpost is in 
    Default: us-west-2a
  outpostArn:
    Type: String
    Description: The ARN of the Outpost
    Default: arn:aws:outposts:us-west-2:131562444230:outpost/op-0cc27b83880c7d8e9
  vpcid:
    Type: String
    Description: The VPC id
    Default: vpc-092e3e79a9ca00270
  # cpmmaincidr:
  #   Type: String
  #   Description: The CIDR Block for CPM Main Machine